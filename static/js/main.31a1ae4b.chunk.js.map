{"version":3,"sources":["containers/Main.js","containers/App.js","serviceWorker.js","index.js","containers/Main.module.css"],"names":["Main","className","styles","to","join","Blue","React","lazy","Red","App","props","exact","path","component","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oOA4BeA,EAvBF,kBACX,yBAAKC,UAAWC,IAAM,MACpB,yBAAKD,UAAWC,IAAO,iBACrB,2DACA,sCACA,yBAAKD,UAAWC,IAAM,OACpB,kBAAC,IAAD,CAASC,GAAG,kBACV,yBAAKF,UAAWC,IAAO,oBACrB,uBAAGD,UAAW,CAACC,IAAO,YAAa,cAAcE,KAAK,OACtD,4CAGJ,kBAAC,IAAD,CAASD,GAAG,mBACV,yBAAKF,UAAWC,IAAO,oBACrB,uBAAGD,UAAW,CAACC,IAAO,aAAc,cAAcE,KAAK,OACvD,iDCfNC,EAAOC,IAAMC,MAAK,kBAAM,uDACxBC,EAAMF,IAAMC,MAAK,kBAAM,iCAgBdE,MAdf,SAAaC,GACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWb,IAC1C,kBAAC,WAAD,CAAUc,SAAU,4CAClB,kBAAC,IAAD,CAAOF,KAAK,iBAAiBC,UAAWL,IACxC,kBAAC,IAAD,CAAOI,KAAK,kBAAkBC,UAAWR,QCH/BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,eAAe,2BAA2B,MAAQ,oBAAoB,kBAAkB,8BAA8B,WAAW,uBAAuB,YAAY,2B","file":"static/js/main.31a1ae4b.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport styles from \"./Main.module.css\";\n\nconst Main = () => (\n  <div className={styles[\"main\"]}>\n    <div className={styles[\"main-context\"]}>\n      <h1>Do you really want to know?</h1>\n      <h1>Choose</h1>\n      <div className={styles[\"pills\"]}>\n        <NavLink to=\"/portfolio/red\">\n          <div className={styles[\"pills-container\"]}>\n            <i className={[styles[\"pill-red\"], \"pills icon\"].join(\" \")}></i>\n            <span>Red Pill</span>\n          </div>\n        </NavLink>\n        <NavLink to=\"/portfolio/blue\">\n          <div className={styles[\"pills-container\"]}>\n            <i className={[styles[\"pill-blue\"], \"pills icon\"].join(\" \")}></i>\n            <span>Blue Pill</span>\n          </div>\n        </NavLink>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Main;\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Main from \"./Main\";\n\nconst Blue = React.lazy(() => import(\"./Blue\"));\nconst Red = React.lazy(() => import(\"./Red\"));\n\nfunction App(props) {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/portfolio\" component={Main} />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Route path=\"/portfolio/red\" component={Red} />\n          <Route path=\"/portfolio/blue\" component={Blue} />\n        </Suspense>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__LmKsS\",\"main-context\":\"Main_main-context__3zj8t\",\"pills\":\"Main_pills__22fZZ\",\"pills-container\":\"Main_pills-container__S3DkN\",\"pill-red\":\"Main_pill-red__186S7\",\"pill-blue\":\"Main_pill-blue__2Ut1B\"};"],"sourceRoot":""}